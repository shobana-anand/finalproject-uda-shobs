# Workflow name
name: Frontend Continuous Deployment

# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:
      
  # Automatic trigger on pull request events targeting the main branch
  #pull_request:
   # branches:
    #  - main

  # Automatic trigger on push to main branch
  #push:
  #  branches:
   #   - main
env:
  REPOSITORY: frontend
  EKS_CLUSTER_NAME: cluster
  AWS_REGION: us-east-1
jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # Restore Cache
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
       
      # Install Dependencies
      - name: Install dependencies
        run: npm install --prefix starter/frontend

      # Run Lint
      - name: Lint code
        run: cd starter/frontend && npm run lint -- --fix

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # Restore Cache
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      
      # Install Dependencies
      - name: Install dependencies
        run: npm install --prefix starter/frontend

      # Run Tests
      - name: Run tests
        run: npm test --prefix starter/frontend 

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      
      # Restore Cache
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}

      #  AWS ECR LOGIN 
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/frontend
          docker build \
          --build-arg REACT_APP_MOVIE_API_URL=${REACT_APP_MOVIE_API_URL} \
          -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG 

      - name: Update Kube Config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Deploy to Kubernetes
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/frontend/k8s
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml   
              
    
          