# Workflow name
name: Backend Continuous Deployment

# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:

  # Automatic trigger on push
  push:
    branches:
      - main    
env:
  REPOSITORY: backend
  EKS_CLUSTER_NAME: cluster
  AWS_REGION: us-east-1
  

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Prepare Pipenv environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv

      # Install Dependencies
      - name: Install dependencies
        run: cd starter/backend && pipenv install 

      # Install Flake8
      - name: Install Flake8
        run: pip install flake8

      # Run Lint
      - name: Lint code
        run: cd starter/backend && pipenv run flake8

  test:
    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Prepare Pipenv environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv

      # Install Dependencies
      - name: Install dependencies
        run: cd starter/backend && pipenv install 

      # Run Tests
      - name: Run tests
        run: cd starter/backend && pipenv run test  
  
  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: success()
        
    steps: 

      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}

  #  AWS ECR LOGIN 
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/backend
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG 

      - name: Update Kube Config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Deploy to Kubernetes
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          ECR_REPO_URL: ${{ env.ECR_REPO_URL_BACKEND }}
        run: |
          cd starter/backend/k8s
          kustomize edit set image backend=$ECR_REPO_URL:$IMAGE_TAG
          kustomize build | kubectl apply -f -
          

      